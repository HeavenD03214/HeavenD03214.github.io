<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Actions实现Hexo个人博客在GIthubPages上的自动部署</title>
    <url>/2024/08/08/Hexo%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="本地部署Hexo并进行配置"><a href="#本地部署Hexo并进行配置" class="headerlink" title="本地部署Hexo并进行配置"></a>本地部署Hexo并进行配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>详情参考：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
</blockquote>
<ul>
<li><p>Git</p>
</li>
<li><p>Node.js</p>
</li>
<li><p>Hexo</p>
<ul>
<li><pre><code class="cmd">$ npm install -g hexo-cli //全局安装
$ npm install hexo //局部安装
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Hexo初始化</span><br><span class="line"></span><br><span class="line">- 新建文件夹初始化Hexo框架</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    hexo init</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>清除部署缓存并开启本地服务</p>
<ul>
<li><pre><code class="cmd">hexo clean
hexo server
//访问localhost:4000可以看到hexo的helloWorld博客界面
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 主题</span><br><span class="line"></span><br><span class="line">### 下载</span><br><span class="line"></span><br><span class="line">- 从github上拉取或者通过NPM下载</span><br><span class="line"></span><br><span class="line">  - ```cmd</span><br><span class="line">    git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">    </span><br><span class="line">    npm i hexo-theme-butterfly</span><br><span class="line">    //放置到目录下的theme文件夹中</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>修改 hexo 配置文件<code>_config.yml</code></p>
<ul>
<li><pre><code class="yaml">theme:主题名称
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **！！！记得删除.git文件不然无法push到gihub中**</span><br><span class="line"></span><br><span class="line">### 配置</span><br><span class="line"></span><br><span class="line">&gt; 参考文档：[Butterfly 安裝文檔(一) 快速開始 | Butterfly](https://butterfly.js.org/posts/21cfbf15/)</span><br><span class="line"></span><br><span class="line">- 一般配置_config.yml文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># GIthubPages挂载</span><br><span class="line"></span><br><span class="line">## 创建仓库</span><br><span class="line"></span><br><span class="line">- 仓库名必须是：你的用户名.github.io</span><br><span class="line"></span><br><span class="line">## Hexo一键部署</span><br><span class="line"></span><br><span class="line">- 安装 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<p>$ npm install hexo-deployer-git –save</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 编辑 **_config.yml** （示例值如下所示）：</span><br><span class="line"></span><br><span class="line">```yaml</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # 创建的仓库远程连接</span><br><span class="line">  branch: gh_pages # 注意分支名，要与之后的actions中配置相对应，最好就用这个</span><br></pre></td></tr></table></figure>

<ul>
<li><pre><code class="cmd">//博客根目录执行
hexo clean //清除旧的部署文件
hexo deploy //一键部署
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 等待GithubActions执行结束</span><br><span class="line"></span><br><span class="line">- 进入仓库Setteings查看Pages</span><br><span class="line"></span><br><span class="line">  - 可以看到分支gh_pages已经挂载到Pages上</span><br><span class="line">  - 点击https://你的用户名.github.io/可以访问到博客</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Actions实现自动化挂载</span><br><span class="line"></span><br><span class="line">## 创建工作流</span><br><span class="line"></span><br><span class="line">- 在根目录的.github文件夹中创建workflows文件夹</span><br><span class="line"></span><br><span class="line">- 在workflows文件夹中创建page.yml(名称无所谓）</span><br><span class="line"></span><br><span class="line">- 编写部署流程：</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    name: Pages</span><br><span class="line">    </span><br><span class="line">    # 触发器、分支</span><br><span class="line">    on:</span><br><span class="line">      push:</span><br><span class="line">        branches:</span><br><span class="line">          - master  # default branch</span><br><span class="line">    jobs:</span><br><span class="line">      # 子任务</span><br><span class="line">      pages:</span><br><span class="line">        runs-on: ubuntu-latest # 定运行所需要的虚拟机环境                     1</span><br><span class="line">        permissions:</span><br><span class="line">          contents: write</span><br><span class="line">        steps:</span><br><span class="line">          - uses: actions/checkout@v2</span><br><span class="line">            # with:</span><br><span class="line">            #   submodules: true</span><br><span class="line">            #   fetch-depth: 0</span><br><span class="line">          # 每个name表示一个步骤:step</span><br><span class="line">          - name: Use Node.js 16.x</span><br><span class="line">            uses: actions/setup-node@v2</span><br><span class="line">            with:</span><br><span class="line">              node-version: &#x27;18.19.0&#x27; # 自己正在使用的node版本即可            2</span><br><span class="line">          - name: 安装 Hexo</span><br><span class="line">            run: |</span><br><span class="line">              export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">              npm install hexo-cli -g</span><br><span class="line">          - name: 缓存 Hexo                   #                            3 </span><br><span class="line">            id: cache-npm</span><br><span class="line">            uses: actions/cache@v3</span><br><span class="line">            env:</span><br><span class="line">              cache-name: cache-node-modules</span><br><span class="line">            with:</span><br><span class="line">              path: node_modules</span><br><span class="line">              key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">              restore-keys: |</span><br><span class="line">                $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">                $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">                $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line">          - name: 安装依赖                     #                            4</span><br><span class="line">            if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">            run: |</span><br><span class="line">              npm install --save</span><br><span class="line">          - name: 查看插件</span><br><span class="line">            run: |</span><br><span class="line">              npm ls --depth 0</span><br><span class="line">              </span><br><span class="line">          - name: 生成静态文件                  #                            5</span><br><span class="line">            run: |</span><br><span class="line">              hexo clean</span><br><span class="line">              hexo generate</span><br><span class="line">    </span><br><span class="line">          - name: Deploy                     #                             6</span><br><span class="line">            uses: peaceiris/actions-gh-pages@v3 </span><br><span class="line">            with:</span><br><span class="line">              deploy_key: $&#123;&#123; secrets.ACTIONS_DEPLOY_KEY  &#125;&#125;</span><br><span class="line">              user_name: heaven</span><br><span class="line">              user_email: heaven@163.com</span><br><span class="line">              # 获取提交文章源码时的commit message，作为发布gh-pages分支的信息</span><br><span class="line">              commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;</span><br><span class="line">              full_commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;</span><br><span class="line">              github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">              # GITHUB_TOKEN不是个人访问令牌，GitHub Actions 运行器会自动创建一个GITHUB_TOKEN密钥</span><br><span class="line">              # 以在您的工作流程中进行身份验证。因此，您无需任何配置即可立即开始部署</span><br><span class="line">              publish_dir: ./public</span><br><span class="line">              allow_empty_commit: true # 允许空提交</span><br><span class="line">          # Use the output from the `deploy` step(use for test action)</span><br><span class="line">          - name: Get the output</span><br><span class="line">            run: |</span><br><span class="line">              echo &quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="部署密钥"><a href="#部署密钥" class="headerlink" title="部署密钥"></a>部署密钥</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key</a></p>
<ol>
<li><p>Open Git Bash.</p>
</li>
<li><p>Paste the text below, replacing the email used in the example with your GitHub email address.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong> If you are using a legacy system that doesn’t support the Ed25519 algorithm, use:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​	3. 得到id_ed25519.pub（公钥）和id_ed25519（私钥）两个文件</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>仓库Settings</p>
</li>
<li><p>Deploy keys</p>
<ul>
<li>配置公钥</li>
</ul>
</li>
<li><p>Secrets and variables</p>
<ul>
<li>actions</li>
<li>New repository secret<ul>
<li>配置私钥</li>
</ul>
</li>
</ul>
</li>
<li><p>！！！！ 全部复制粘贴，保持完整</p>
</li>
</ul>
<h2 id="push到该仓库的一个新建分支"><a href="#push到该仓库的一个新建分支" class="headerlink" title="push到该仓库的一个新建分支"></a>push到该仓库的一个新建分支</h2><h3 id="等待Actions部署完毕"><a href="#等待Actions部署完毕" class="headerlink" title="等待Actions部署完毕"></a>等待Actions部署完毕</h3><h3 id="访问https-你的用户名-github-io"><a href="#访问https-你的用户名-github-io" class="headerlink" title="访问https:&#x2F;&#x2F;你的用户名.github.io&#x2F;"></a>访问https:&#x2F;&#x2F;你的用户名.github.io&#x2F;</h3>]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GIthubPages</tag>
        <tag>GIthubActions</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2024/08/07/JavaBase/</url>
    <content><![CDATA[<h1 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h1><ul>
<li>基本数据类型：6种数字类型（byte&#x2F;short&#x2F;int&#x2F;long&#x2F;float&#x2F;double）、1种字符型（char）、1种布尔型（boolean）</li>
<li>引用数据类型：类（Class）、接口（Interface）、数组（Array）</li>
<li>除了以上的基本数据类型和引用数据类型，还有一些其他相关的数据类型，例如字符串类型String、枚举类型Enum，它们都是基于引用数据类型来实现的</li>
<li><strong>基本数据类型只能存自己类型的值，无其他额外功能</strong>，具体介绍如下第2小节</li>
<li>引用类型：参数传递时，以拷贝引用地址的方式传递给接收变量，而非复制整个数据本体。<strong>除八大基本数据类型之外的所有数据类型，都为引用数据类型</strong>。所有引用数据类型的默认值都为null。</li>
<li>为了基本数据类型可以与引用数据类型互相转换、以利用彼此的特性，java为每一种基本数据类型提供了相应的包装类。包装类对基本数据类型进行了封装，提供了丰富的功能，<strong>包装类是基本类型的拓展</strong></li>
</ul>
<h2 id="float、double不能用来表示精确的值，运算不精确"><a href="#float、double不能用来表示精确的值，运算不精确" class="headerlink" title="float、double不能用来表示精确的值，运算不精确"></a>float、double不能用来表示精确的值，运算不精确</h2><p>解决方案：BigDecimal。创建BigDecimal对象的方式：</p>
<ul>
<li>BigDecimal(double val) : double类型的数据作为参数，交给BigDecimal对象【不用，因为double本身不精确】</li>
<li>BigDecimal(String val) : String类型的数据作为参数，交给BigDecimal对象【用这个】<br>注：double-&gt;String 直接拼接一个字符串””就行。</li>
</ul>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>转换从低级到高级：byte、short、char（三者同级）——&gt; int ——&gt; long ——&gt; float ——&gt; double</p>
<h2 id="基本数据类型与引用数据类型区别"><a href="#基本数据类型与引用数据类型区别" class="headerlink" title="基本数据类型与引用数据类型区别"></a>基本数据类型与引用数据类型区别</h2><ul>
<li>存储方式：基本数据类型直接存储值，而引用数据类型存储的是对象的引用（内存地址）</li>
<li>内存分配：基本数据类型在栈上分配内存，引用数据类型在堆上分配内存（具体内容存放在堆中，栈中存放的是其具体内容所在内存的地址）。栈上的分配速度较快，但是内存空间较小，而堆上的分配速度较慢，但可以分配更大的内存空间</li>
<li>默认值：基本数据类型会有默认值，例如int类型的默认值是0，boolean类型的默认值是false。而引用数据类型的默认值是null，表示没有引用指向任何对象</li>
<li>复制操作：基本数据类型进行复制时，会复制该变量的值。而引用数据类型进行复制时，只会复制对象的引用，两个变量指向同一个对象</li>
<li>参数传递：基本数据类型作为方法的参数传递时，传递的是值的副本，不会修改原始值。而引用数据类型作为方法的参数传递时，传递的是对象的引用，可以修改对象的属性或状态</li>
<li>比较操作：基本数据类型使用&#x3D;&#x3D;进行比较时，比较的是值是否相等。而引用数据类型使用&#x3D;&#x3D;进行比较时，比较的是引用是否指向同一个对象，如果要比较对象的内容是否相同，需要使用equals()方法</li>
</ul>
<h2 id="基本数据类型与包装类区别"><a href="#基本数据类型与包装类区别" class="headerlink" title="基本数据类型与包装类区别"></a>基本数据类型与包装类区别</h2><ul>
<li>存储方式：基本类型直接存储值，而包装类型存储的是对应基本类型值的对象。</li>
<li>空值处理：基本类型没有空值（null）的概念，而包装类型可以将null作为有效值来表示缺失或无效值。</li>
<li>默认值：基本类型有默认值，例如int类型的默认值是0，boolean类型的默认值是false。而包装类型的默认值是null。</li>
<li>对象操作：基本类型不能直接调用方法，而包装类型可以调用对应的方法，例如Integer类的intValue()方法可以获取保存在Integer对象中的值。</li>
<li>自动装箱&#x2F;拆箱：基本类型和包装类型之间可以进行自动装箱和拆箱的转换。自动装箱是指将基本类型的值自动转换为对应的包装类型对象，如int 转Integer，Integer integer &#x3D; 100，底层调用了Interger.valueOf(100)方法；而自动拆箱则是将包装类型对象自动转换为基本类型的值。</li>
<li>泛型支持：泛型只能使用引用类型，不能直接使用基本类型。因此，当需要在泛型中使用基本类型时，需要使用对应的包装类型。</li>
<li>比较方式：基本类型使用&#x3D;&#x3D;进行比较时，比较的是值是否相等。而包装类型使用&#x3D;&#x3D;进行比较时，比较的是引用是否指向同一个对象，而不是比较值是否相等。若要比较包装类型的值是否相等，需要使用equals()方法。</li>
</ul>
<h1 id="面向对象-OOP-思想"><a href="#面向对象-OOP-思想" class="headerlink" title="面向对象(OOP)思想"></a>面向对象(OOP)思想</h1><blockquote>
<ol>
<li><p>封装（Encapsulation）<br>数据，属性，方法捆绑在一起，成为黑盒。设置访问权限保护数据的完整性，减少错误，增强模块间的独立性。</p>
</li>
<li><p>继承（Inheritance）<br> 继承允许一个类（子类&#x2F;派生类）继承另一个类（父类&#x2F;基类）的属性和方法，实现代码的复用。子类可以继承父类的所有非私有属性和方法，并可以增加或重写父类的方法以适应更具体的需求。这有助于建立类的层次结构，促进软件的模块化设计。</p>
</li>
<li><p>多态（Polymorphism）<br> 多态意味着一个接口可以有多种实现方式，或者一个类实例的相同消息可以产生多种响应。在Java等面向对象语言中，多态主要通过方法重写（Override）和接口实现来体现。它使得代码更加灵活和可扩展，因为可以在运行时根据对象的实际类型来决定调用哪个方法，而不是在编译时确定。</p>
</li>
<li><p>抽象（Abstraction）<br> 抽象是指将复杂的系统分解为更简单的组成部分，关注关键特性和行为，忽略不必要的细节。在OOP中，抽象类或接口用来定义一个或多个类的共同属性和操作，但不提供具体实现。抽象类不能被实例化，其目的是为了被子类继承。接口则完全由抽象方法组成，强制实现类遵循某种规范或协议。</p>
</li>
</ol>
</blockquote>
<h1 id="Java内存分区"><a href="#Java内存分区" class="headerlink" title="Java内存分区"></a>Java内存分区</h1><h2 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h2><blockquote>
<p>由操作系统分配和管理的内存区域，它与虚拟机无关。在 Java 中，本地内存通常用于存储 JNI（Java Native Interface）方法调用时的数据以及本地方法库（Native Libraries）等内容。JNI 允许 Java 代码调用本地（非 Java）方法，而本地方法库是由 C、C++ 等语言编写的动态链接库，用于实现这些本地方法。本地内存的分配和释放由操作系统负责管理，而不受 Java 虚拟机的控制。</p>
</blockquote>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><blockquote>
<p>直接内存是一种特殊的内存缓冲区，并不在 Java 堆或方法区中分配的，而是通过 JNI 的方式在本地内存上分配的。直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。用于提供在堆之外进行对象分配的一种方式。</p>
</blockquote>
<h3 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h3><blockquote>
<p>方法区（Method Area）&#x2F; 元空间（Metaspace）：<br>方法区是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。方法区会存储已被虚拟机加载的 类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>
<ul>
<li>需要注意的是，在 JDK 1.8 之后，Java 虚拟机使用元空间（Metaspace）来代替永久代（Permanent Generation）来存储类的元数据。元空间不再位于堆中，而是位于本地内存（Native Memory）中。并且方法区（Method Area）也被替换为元空间（Metaspace）。</li>
<li>方法区和永久代以及元空间的关系？ <ul>
<li>方法区和永久代以及元空间的关系很像 Java 中接口和类的关系，类实现了接口，这里的类就可以看作是永久代和元空间，接口可以看作是方法区，也就是说永久代以及元空间是 HotSpot 虚拟机对虚拟机规范中方法区的两种实现方式。在 JDK 1.8 之前称为方法区，而在 JDK 1.8 及以后版本使用元空间代替了方法区。<br>运行时常量池：Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 常量池表(Constant Pool Table) 。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><h2 id="运行时数据"><a href="#运行时数据" class="headerlink" title="运行时数据"></a>运行时数据</h2><blockquote>
<p>Java 虚拟机在运行 Java 程序时使用的不同内存区域，由虚拟机动态管理。</p>
</blockquote>
<h3 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h3><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote>
<p>线程共享的内存区域，用于存储对象实例和数组等动态分配的内存，在虚拟机启动时创建。是 Java 虚拟机管理的最大的一块内存区域，也是垃圾回收的主要区域。</p>
<ul>
<li>字符串常量池：是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。HotSpot 虚拟机中字符串常量池保存的是字符串（key）和 字符串对象的引用（value）的映射关系，字符串对象的引用指向堆中的字符串对象。</li>
</ul>
</blockquote>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h2 id="直接内存-1"><a href="#直接内存-1" class="headerlink" title="直接内存"></a>直接内存</h2><blockquote>
<p>非运行时数据区的一部分</p>
</blockquote>
<h3 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h3><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><blockquote>
<p>线程私有的内存区域，每个线程都有自己的虚拟机栈。用于存储方法执行时的局部变量、操作数栈、动态链接、方法出口等信息。方法调用的数据需要通过栈进行传递，每一次方法调用都会有一个对应的栈帧被压入栈中，方法调用结束后，栈帧被弹出。局部变量放在栈里面，形参属于局部变量。而成员变量随着类的创建而产生，放在堆里面。</p>
<ul>
<li>局部变量表：主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</li>
<li>操作数栈：主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</li>
<li>动态链接：主要服务一个方法需要调用其他方法的场景。Class 文件的常量池里保存有大量的符号引用比如方法引用的符号引用。当一个方法要调用其他方法，需要将常量池中指向方法的符号引用转化为其在内存地址中的直接引用。动态链接的作用就是为了将符号引用转换为调用方法的直接引用，这个过程也被称为 动态连接 。</li>
<li>方法出口：Java 方法有两种返回方式，一种是 return 语句正常返回，一种是抛出异常。不管哪种返回方式，都会导致栈帧被弹出。也就是说， 栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。<br>除了 StackOverFlowError 错误之外，栈还可能会出现OutOfMemoryError错误，这是因为如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>
</ul>
</blockquote>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><blockquote>
<p>类似于虚拟机栈，但是用于执行本地方法（Native Method）的线程私有内存区域。<br>存储本地方法的局部变量、操作数栈、动态链接等信息。</p>
</blockquote>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><blockquote>
<p>线程私有的内存区域，每个线程都有一个程序计数器。<br>主要用于记录当前线程正在执行的字节码指令的地址或者正在执行的方法的当前行号。字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。<br>在线程切换时，程序计数器是不会发生线程间切换的，每个线程都会有独立的计数器记录执行位置。当线程被切换回来的时候能够知道该线程上次运行到哪儿了。<br>⚠️ 注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束死亡。</p>
</blockquote>
<h1 id="Java内存回收算法"><a href="#Java内存回收算法" class="headerlink" title="Java内存回收算法"></a>Java内存回收算法</h1><h1 id="常用Java-Api"><a href="#常用Java-Api" class="headerlink" title="常用Java Api"></a>常用Java Api</h1><h2 id="String、StringBuffer和-StringBuilder"><a href="#String、StringBuffer和-StringBuilder" class="headerlink" title="String、StringBuffer和 StringBuilder"></a>String、StringBuffer和 StringBuilder</h2><blockquote>
<p>为什么拼接、反转字符串的时候要用StringBuilder？</p>
<p>String：内容不可变、拼接字符串性能差‘</p>
<p>StringBuilder：内容是可变的、拼接字符串性能好、书写优雅</p>
<p>定义字符串使用String；</p>
<p>拼接、修改等操作字符串使用StringBuilder。</p>
</blockquote>
<h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><h3 id="BigDecimal与MySQL的映射关系"><a href="#BigDecimal与MySQL的映射关系" class="headerlink" title="BigDecimal与MySQL的映射关系"></a>BigDecimal与MySQL的映射关系</h3><blockquote>
<p>在MySQL中，我们可以使用DECIMAL数据类型来存储高精度的数值。DECIMAL类型可以指定精度和小数位数，因此非常适合存储BigDecimal类型的数据。在Java中，我们可以使用BigDecimal的构造方法将DECIMAL类型的数据转换为BigDecimal对象，也可以使用BigDecimal的toString方法将BigDecimal对象转换为DECIMAL类型的字符串。</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>【强制】 禁止使用构造方法BigDecimal(double) 的方式把 double 值转化为 BigDecimal 对象。</p>
<p> 说明：BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p>
<p> 如：BigDecimal g &#x3D; new BigDecimal(0.1F); 实际的存储值为：0.10000000149。</p>
<p> 正例： 优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断</p>
<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h2><blockquote>
<p>本质都是基于Runnable接口的方式来创建的</p>
</blockquote>
<h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> extend Thread&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    pulic <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">xxx</span>(<span class="keyword">new</span> <span class="title class_">xxx</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    pulic <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">xxx</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用匿名内部类或Lambda表达式的方式</p>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	pulic <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>参数是接口实现实例且接口只需要实现一个方法（函数式接口）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">	……</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3.实现Callable接口"></a>3.实现Callable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableExample</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 这里是任务的代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;任务执行完毕&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Callable&lt;String&gt; callable = <span class="keyword">new</span> <span class="title class_">CallableExample</span>();</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取callable任务的返回值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-利用线程池创建"><a href="#4-利用线程池创建" class="headerlink" title="4.利用线程池创建"></a>4.利用线程池创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxx</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    pulic <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException ...&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">XushuThread</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-匿名内部类-6-Lambda表达式"><a href="#5-匿名内部类-6-Lambda表达式" class="headerlink" title="5.匿名内部类&#x2F;6.Lambda表达式"></a>5.匿名内部类&#x2F;6.Lambda表达式</h3><ul>
<li>Runnable接口是函数式接口</li>
</ul>
<h2 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h2><h3 id="为什么不推荐用Excutores创建线程池"><a href="#为什么不推荐用Excutores创建线程池" class="headerlink" title="为什么不推荐用Excutores创建线程池"></a>为什么不推荐用Excutores创建线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在阻塞队列，最大值为Interger.MAX_VALUE，高并发情况下阻塞队列中等待任务过多会造成OOM</span></span><br><span class="line">newFixedThreadPool() <span class="comment">//指定线程创建数量</span></span><br><span class="line">newSingleThreadExecutor() <span class="comment">//固定只创建一个线程</span></span><br><span class="line"><span class="comment">//动态扩容，最大线程数是Interger.MAX_VALUE，高并发情况下阻塞队列中等待任务过多会造成OOM</span></span><br><span class="line">newCachedThreadPool()</span><br><span class="line"><span class="comment">//推荐使用：</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(参数如下)</span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">corePoolSize 核心线程数量</span><br><span class="line">maximumPoolSize 最大线程数量</span><br><span class="line">keepAliveTime 非核心线程的空闲状态的存活时间</span><br><span class="line">unit 时间单位</span><br><span class="line">workQueue 工作队列（阻塞队列）</span><br><span class="line">threadFactory 线程工厂(创建线程)</span><br><span class="line">handler 拒绝策略</span><br></pre></td></tr></table></figure>

<h3 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提交流程</span><br><span class="line">  submit=&gt;start: 提交任务</span><br><span class="line">  coremax=&gt;condition: 核心线程是否已满</span><br><span class="line">  queuemax=&gt;condition: 阻塞队列是否已满</span><br><span class="line">  threadmax=&gt;condition: 是否已达到最大线程数</span><br><span class="line">  reject=&gt;end: 拒绝策略</span><br><span class="line">  core=&gt;operation: 创建核心线程，执行任务</span><br><span class="line">  queue=&gt;operation: 加入到阻塞队列中排队</span><br><span class="line">  temp=&gt;operation: 创建临时线程，执行任务(设置keepAliveTime)</span><br><span class="line">  submit-&gt;coremax</span><br><span class="line">  coremax(yes)-&gt;queuemax</span><br><span class="line">  coremax(no)-&gt;core</span><br><span class="line">  queuemax(yes)-&gt;threadmax</span><br><span class="line">  queuemax(no)-&gt;queue</span><br><span class="line">  threadmax(yes)-&gt;reject</span><br><span class="line">  threadmax(no)-&gt;temp</span><br></pre></td></tr></table></figure>



<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ul>
<li><p>执行任务的run方法</p>
</li>
<li><p>任务执行完从阻塞队列中拿任务getTask()</p>
</li>
<li><p>getTask()</p>
</li>
<li><p>通过当前线程数是否大于核心线程数来判断是否为核心线程</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">workQueue.poll(keppAliveTime, TimeUnit.NANOSECONDS) : <span class="comment">//阻塞存活时间拿取任务   ---临时线程</span></span><br><span class="line">work Queue.take()；<span class="comment">//阻塞无限时间拿取任务 ---核心线程</span></span><br></pre></td></tr></table></figure>

<ul>
<li>临时线程在存活时间内拿不到任务执行就会执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compareAndDecrementWorkerCount(<span class="type">int</span> expect)&#123;  <span class="comment">//销毁线程</span></span><br><span class="line">    <span class="comment">//通过CAS方式将进程数-1，保证同一时间只有一个线程执行线程数-1操作</span></span><br><span class="line">    <span class="keyword">return</span> ctl.compareAndSet(expect, exect-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//通过CAS销毁</span></span><br><span class="line">    <span class="comment">//线程会随机减少一个</span></span><br><span class="line">    <span class="comment">//线程池并没有严格的标志某一个线程一定是核心线程</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h3 id="线程异常中断"><a href="#线程异常中断" class="headerlink" title="线程异常中断"></a>线程异常中断</h3><p>任务执行报错就会抛出异常，线程处理时会捕获并抛出，线程抛出异常就会导致线程中断销毁</p>
<ul>
<li>为什么不忽略任务，直接执行下一个<ul>
<li>一般任务执行失败都需要进行相关失败处理</li>
<li>线程池中可以设置一个异常捕获处理</li>
</ul>
</li>
</ul>
<h3 id="线程关闭"><a href="#线程关闭" class="headerlink" title="线程关闭"></a>线程关闭</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A： threadPool.shutdown();||</span><br><span class="line">B： threadPool.shutdownNow();</span><br></pre></td></tr></table></figure>

<ul>
<li>两种方法调用时会改变线程池状态，A-SHUTDOWN，B-STOP（在判断时会直接return null,销毁线程）</li>
<li>此时就无法提交任务（直接将任务派给核心线程或将任务塞入阻塞队列），因为会判断线程池处于运行状态</li>
<li>线程在执行任务时被通知关闭通过，thread.interrupt() </li>
<li>线程执行拿任务过程中被通知关闭，即阻塞拿任务时，会触发InterruptedException异常，将timeout设置为false</li>
<li>线程刚刚拿到任务被通知要关闭，会将任务执行完后再在拿取任务时被关闭(return null)</li>
</ul>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="Sychroized"><a href="#Sychroized" class="headerlink" title="Sychroized"></a>Sychroized</h3><blockquote>
<p>Java中的一个关键字</p>
<p>JVM层面</p>
<p>自动加锁和释放锁</p>
<p>不可获取当前线程是否上锁</p>
<p>非公平锁</p>
<p>不可中断</p>
<p>锁的是对象，锁信息保存在对象头中</p>
<ul>
<li>底层有锁升级过程<ul>
<li>无锁&#x3D;&gt;偏向锁&#x3D;&gt;轻量级锁&#x3D;&gt;重量级锁</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h2><blockquote>
<p>通过并发量，动态调节锁的实现</p>
</blockquote>
<ul>
<li><p>偏向锁，在锁对象对象头中记录当前获取到该锁的线程id，该线程下次如果又来获取该锁就可以直接获取到，也就是支持锁重入</p>
</li>
<li><p>轻量级锁：两个或以上线程交替获取锁，但并没有在对象上并发的获取锁时，偏向锁会升级成轻量级锁。</p>
<ul>
<li>此阶段线程采用CAS自旋方式尝试获取锁，避免阻塞线程造成的cpu在用户态和内核态间转换的消耗</li>
</ul>
</li>
<li><p>重量级锁：两个或以上线程并发的在同一个对象上进行同步时，为了避免无用自旋消耗cpu，轻量级锁会升级成重量级锁</p>
</li>
<li><p>自旋锁：</p>
</li>
</ul>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><blockquote>
<p>JDK提供的一个类</p>
<p>API层面的锁</p>
<p>需要手动加锁与释放锁</p>
<p>可获取当前线程是否上锁（isHeldByCurrentThread）</p>
<ul>
<li><p>公平锁或非公平锁 new ReentrantLock(true || false)</p>
</li>
<li><p>可中断</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.设置超时方法</span></span><br><span class="line">tryLock(<span class="type">long</span> timeout,timeUnit unit);</span><br><span class="line"><span class="comment">//2.调用lockInterruptibly()放到代码块中</span></span><br><span class="line"><span class="comment">//后调用interrupt()方法可以中断</span></span><br></pre></td></tr></table></figure>

<p>int类型的state标识来标识锁的状态</p>
<p>没有锁升级过程</p>
</blockquote>
<h2 id="公共锁和非公平锁"><a href="#公共锁和非公平锁" class="headerlink" title="公共锁和非公平锁"></a>公共锁和非公平锁</h2><blockquote>
<p>只体现在加锁阶段，对线程被唤醒阶段没有影响</p>
</blockquote>
<ul>
<li>公平锁会检查AQS队列中是否存在线程在排队，如果有排队则当前线程也进行排队</li>
<li>非公平锁不会去检查是否有线程排队，直接去竞争锁资源，如果没有竞争到则也进行排队</li>
</ul>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>线程本地存储机制，利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻，任意方法中获取缓存的数据</p>
<ul>
<li><p>本质是暴露出来用来操作当前线程的ThreadLocalMap的工具类</p>
</li>
<li><p>ThreadLocalMap存储Entry（键值对）对象，其中键为ThreadLocal值为缓存的数据</p>
</li>
</ul>
<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><ul>
<li><p>ThreadLocal对象使用完后应该对Entry对象进行手动回收（ThreadLocal的remove方法）</p>
</li>
<li><p>线程通过强引用指向ThreadLocalMap，ThreadLocalMap又通过强引用指向Entry，所以线程不被回收，Entry对象也就不会回收</p>
</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>共享变量，但每个线程互不影响，相互隔离，就可以使用ThreadLocal</p>
</blockquote>
<ul>
<li>a:  跨层传递信息，每个方法调用都要声明重复参数，存储ThreadLocal中，即可省去传参直接全局调用</li>
<li>b：隔离线程，存储一些线程不安全的工具对象，如（SimpleDateFormat）</li>
<li>c:  Spring的事务管理器</li>
<li>d:  springmvc实现线程安全<ul>
<li>springmvc的HttpSession、HttpServletReuquest、HttpServletResponse，servlet是单例的</li>
<li>springmvc允许在controller类中通过@Autowired配置request，response，requestcontext等实例对象</li>
</ul>
</li>
</ul>
<h2 id="Tomcat为什么要自定义类加载器"><a href="#Tomcat为什么要自定义类加载器" class="headerlink" title="Tomcat为什么要自定义类加载器"></a>Tomcat为什么要自定义类加载器</h2><p>一个 T omcat 中可以部署多个应用，而每个应用中都存在很多类，并且各个应用中的类是独立的全类名是可以相同的，比如一个订单系统中可能存在 com .xushu.User 类，一个库存系统中可能也存在 com.xushu.User类 ，一个 Tomcat, 不管内部部署了多少应用， Tomcat 启动之后就是一个Javai程，也就是一个 JVM ，所以如果 Tomcat 中只存在一个类加载器，比如默认的AppClassLoader, 那么就只能加 载一 个 com.xushu.User类 ，这是有问题的，而在 Tomcat 中，为部署的每个应用都生成一个类加载器实例，名字叫做 WebAppClassLoader, 这样 Tomcat 中每个应用就可以使用自己的类加载器去加载自己的类，从而达到应用之间的类隔离，不出现冲突。另外 Tomcat 还利用自定义加载器实现了热加载功能·</p>
<h1 id="Lambda表达式-1"><a href="#Lambda表达式-1" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>语法糖，简化某些匿名内部类的写法</p>
<h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></figure>

<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="匿名内部类-1"><a href="#匿名内部类-1" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	pulic <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式-2"><a href="#Lambda表达式-2" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>调用的方法参数是接口实现实例且接口只有有一个抽象方法（函数式接口）</p>
<blockquote>
<p>1.参数类型可推导可省略类型声明</p>
<p>2.只有一个参数可省略括号</p>
<p>3.实现只有一行代码可省略大括号，如果一行代码包括return可以把return也省略</p>
<p>4.省略上述，编译器里用快捷键alt + enter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">	……</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>Java8新特性，使用函数式编程，可以使对数组和集合进行链状流式操作更加方便</p>
<ul>
<li>惰性求值，没有终结操作不执行</li>
<li>流是一次性的，执行完释放</li>
<li>不会影响原数据</li>
</ul>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组和集合.stream()</span><br><span class="line">    		<span class="comment">//去重(类中一般需要重写equals 和 hashcode)</span></span><br><span class="line">            .distinct() </span><br><span class="line">    		<span class="comment">//条件过滤参数是函数式接口</span></span><br><span class="line">            .filter((需要筛除的对象类型参数) -&gt;&#123;</span><br><span class="line">            <span class="comment">//筛出规则</span></span><br><span class="line">            &#125;)   </span><br><span class="line">    		 <span class="comment">//循环遍历参数是函数式接口</span></span><br><span class="line">    		.forEach((需要操作的对象类型参数) -&gt; &#123;</span><br><span class="line">             <span class="comment">//需求操作</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h3><h2 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">集合对象.stream()</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.stream(数组) || Stream.of(数组)</span><br></pre></td></tr></table></figure>

<h2 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h2><p>&#x2F;&#x2F;将键值对封装成Entry对象后再创建流对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.entrySet().Stream()</span><br></pre></td></tr></table></figure>

<h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><ul>
<li><p>filter 重写过滤条件（返回true &#x2F; false）过滤数据</p>
<ul>
<li><pre><code>.filter(author -&gt; author.getAge() &gt; 18)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- map 对流中的元素进行计算或转换</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    创建流对象</span><br><span class="line">    	.map(元素对象 -&gt; 对象.get属性()) //只需要对对象中的某个属性进行操作</span><br><span class="line">        </span><br><span class="line">        重写了的接口function为:</span><br><span class="line">    new Fuction&lt;对象类型, Object&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Object apply(对象类型 参数)&#123;</span><br><span class="line">            //对属性进行操作</span><br><span class="line">            //返回需要的属性</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>flatMap</p>
<ul>
<li><p>把一个对象转换成多个对象作为流中的元素，</p>
</li>
<li><pre><code class="java">//一个作家多本书，使用map转换出来的对象是List集合，遍历操作需要嵌套遍历
//flatmap则把书列表转换成流然后拼接，这样就得到了所有的书，遍历时也无需嵌套了
.flatMap(author -&gt; author.getBooks().stream()) //此时得到所有书的对象流
    //如果想得到书的标签，但标签是一个长字符串如 “爱情,玄幻”
    //使用split分割字符串成数组再转换成流
.flatMap(book -&gt; Arrays.stream(book.getTags().split(&quot;,&quot;))
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- distinct 去重，依赖Object的equals方法来判断(类中一般需要重写equals 和 hashcode)</span><br><span class="line"></span><br><span class="line">- sorted 对流中的元素进行排序</span><br><span class="line"></span><br><span class="line">  - 类里实现Comparable接口（频繁调用）</span><br><span class="line"></span><br><span class="line">  - 匿名内部类 =&gt; Lambda表达式（特殊调用）</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        </span><br><span class="line">      //重写Comparator接口的Compare方法</span><br><span class="line">        public int compare (Author o1, Author o2)&#123;</span><br><span class="line">        	return o2.getAge() - o1.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>limit 设置流的最大长度，超出部分将会抛弃</p>
<ul>
<li><pre><code>.limit(int)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- skip 跳过流当中的前n个元素，返回剩下的元素</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    .skip(int)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h3><ul>
<li><p>forEach() 遍历流中对象并进行相关操作</p>
<ul>
<li><pre><code class="java">.forEach(对象 -&gt; 操作)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- count 获取当前流中元素的个数</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    .count();</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>max &amp; min</p>
<ul>
<li><pre><code class="java">//相当于sort + limit
//需要重写比较器的compare方法
.max((score1, score2) -&gt; score1 - score2);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- collect 把流当中的元素转化成集合</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //list</span><br><span class="line">    .collect(Collectors.toList())</span><br><span class="line">    //set</span><br><span class="line">    .collect(Collectors.toSet())</span><br><span class="line">    //map</span><br><span class="line">    .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBookList()))</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>anyMatch</p>
<ul>
<li><pre><code class="java">//同filter过滤器一样，参数为实现Predicate接口
//只要有一个满足条件返回true
.anyMatch(author -&gt; author.getAge() &gt; 29)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- allMatch</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //同filter过滤器一样，参数为实现Predicate接口</span><br><span class="line">    //所有对象均符合条件返回true</span><br><span class="line">    .allMatch(author -&gt; author.getAge() &gt; 29)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>noneMatch</p>
<ul>
<li><pre><code class="java">//同filter过滤器一样，参数为实现Predicate接口
//所有对象均不符合条件返回true
.noneMatch(author -&gt; author.getAge() &gt; 29）
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- findAny</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //同filter过滤器一样，参数为实现Predicate接口</span><br><span class="line">    //获取任意一个符合条件的对象</span><br><span class="line">    .findAny(author -&gt; author.getAge() &gt; 29)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>findFirst</p>
<ul>
<li><pre><code class="java">//同filter过滤器一样，参数为实现Predicate接口
//获取第一个符合条件的对象
.findAny(author -&gt; author.getAge() &gt; 29)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- reduce 归并 ，对流中的数据按照指定计算方式计算出一个结果</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    //使用reduce求年龄和</span><br><span class="line">    .map(author -&gt; author.getAge())</span><br><span class="line">    .reduce(0, (result, elment) -&gt; result + element)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><pre><code>//使用reduce求年龄最大值,最小值同理
.map(author -&gt; author.getAge())
.reduce(Interger.MIN_VALUE, (result, elment) -&gt; result &lt; element ? element : result)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Optional</span><br><span class="line"></span><br><span class="line">### 创建对象</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  Author author = getAuthor(); //实际上期望getAuthor()的返回值就是Optional，进行提前封装</span><br><span class="line">  Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);</span><br><span class="line">  authorOptional.ifPresent(author -&gt; &#123;</span><br><span class="line">  	//具体操作</span><br><span class="line">  &#125;)</span><br><span class="line">  //确定author对象非空</span><br><span class="line">  则可以用</span><br><span class="line">  Optional.of(author);</span><br><span class="line">  //创建空对象</span><br><span class="line">  Optional.empty);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="安全获取值"><a href="#安全获取值" class="headerlink" title="安全获取值"></a>安全获取值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">author.orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">Author</span>()); <span class="comment">//不为空返回author，为空返回默认值new Author()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果期望抛出异常，使用后端框架进行统一异常捕获</span></span><br><span class="line">author.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">//不为空返回author，为空返回默认值new Author()</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul>
<li>使用.filter()同前面的中间操作一样,返回值是过滤后的Optional<T></li>
</ul>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul>
<li>除去ifpresent（函数式接口传参）外还有一个isPresent需要用if else判断不够优雅</li>
</ul>
<h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><ul>
<li>使用.map()同前面的中间操作一样,返回值是过滤后的Optional<T></li>
</ul>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>接口当中只有一个抽象方法（一般都有@FunctionalInterface注解）</p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul>
<li>基本格式： 类名或对象名::方法名</li>
</ul>
<h3 id="引用类的静态方法"><a href="#引用类的静态方法" class="headerlink" title="引用类的静态方法"></a>引用类的静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.map(author -&gt; author.getAge())</span><br><span class="line">.map(age -&gt; String.valueof(age))</span><br><span class="line"><span class="comment">//可以转化成</span></span><br><span class="line">.map(author -&gt; author.getAge())</span><br><span class="line">    <span class="comment">//重写方法仅一行代码，使用某个类的静态方法，且所有参数都传入该静态方法</span></span><br><span class="line">.map(String::valueOf)</span><br></pre></td></tr></table></figure>

<h3 id="引用对象的实例方法"><a href="#引用对象的实例方法" class="headerlink" title="引用对象的实例方法"></a>引用对象的实例方法</h3><ul>
<li>重写方法仅一行代码，使用某个实例对象的方法，且所有参数都传入该方法<ul>
<li>该对象::方法名</li>
</ul>
</li>
</ul>
<h3 id="引用类的实例方法"><a href="#引用类的实例方法" class="headerlink" title="引用类的实例方法"></a>引用类的实例方法</h3><ul>
<li>重写方法仅一行代码，使用第一个参数的成员方法，且其它所有参数都传入该方法<ul>
<li>该成员对象::方法名</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.map(author -&gt; author.getAge())</span><br><span class="line"><span class="comment">//可以转化成</span></span><br><span class="line">.map(author::getAge)</span><br></pre></td></tr></table></figure>

<h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><ul>
<li>重写方法仅一行代码，使用某个类的构造器，且所有参数都传入该构造器<ul>
<li>该类名::new</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.map(author -&gt; <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(author))</span><br><span class="line"><span class="comment">//可以转化成</span></span><br><span class="line">.map(StringBuilder::<span class="keyword">new</span>)</span><br></pre></td></tr></table></figure>

<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="基本数据类型优化"><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h3><ul>
<li>使用基本数据类型包装类进行操作时会进行不断地自动拆箱装箱，数据量大时会消耗很多时间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.map(author -&gt; author.getAge()) //Interger类型</span><br><span class="line">.map(age -&gt; age + 10) //int基本类型操作，先拆箱后装箱</span><br><span class="line">//转换成</span><br><span class="line">.mapToInt(author -&gt; author.getAge()) //int类型</span><br><span class="line">.map(age -&gt; age + 10) //int基本类型操作，无需拆箱装箱</span><br></pre></td></tr></table></figure>

<h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><ul>
<li>多线程执行流操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.parallerl() <span class="comment">//成为并行流对象</span></span><br><span class="line">    .peek(num -&gt; Sysytem.out.println(num + Thread.currenThread().getName()))  <span class="comment">//调试方法，中间操作</span></span><br></pre></td></tr></table></figure>



<h1 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h1><h2 id="强引用-Strong-Reference"><a href="#强引用-Strong-Reference" class="headerlink" title="强引用 (Strong Reference)"></a>强引用 (Strong Reference)</h2><p>这是最常用的引用类型。当一个对象被强引用关联时，只要这个引用存在，垃圾收集器就不会回收这个对象。<br>实例化一个对象并将其赋值给一个变量时，这个变量就是一个强引用。<br>只有当没有强引用指向一个对象，并且该对象不可达时，垃圾收集器才可能回收它。</p>
<h2 id="软引用-Soft-Reference"><a href="#软引用-Soft-Reference" class="headerlink" title="软引用 (Soft Reference)"></a>软引用 (Soft Reference)</h2><p>软引用是用来描述那些有用但不是必须的对象。在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收。<br>如果使用软引用来保存一个对象，只要内存足够，对象就不会被回收。<br>软引用通常用于实现内存敏感的缓存，例如图像缓存或数据库结果集缓存。</p>
<p>【1】软引用 (Soft Reference)实例<br>软引用（Soft Reference）在Java中主要用于实现内存敏感的缓存。当Java虚拟机（JVM）的内存开始变得紧张时，软引用指向的对象可能会被垃圾回收器回收，从而释放内存空间。软引用通常与引用队列（Reference Queue）结合使用，以便在软引用对象被垃圾回收器回收时接收到通知。</p>
<p>下面是一个使用SoftReference的简单示例，展示了如何创建软引用并检查对象是否仍然可达：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个引用队列</span></span><br><span class="line">        ReferenceQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建一个字符串对象，并使用软引用指向它</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, SoftReference!&quot;</span>);</span><br><span class="line">        SoftReference&lt;String&gt; softRef = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(str, queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查软引用是否仍然指向一个可达对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Initially: &quot;</span> + softRef.get());  <span class="comment">// 输出: Hello, SoftReference!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试手动回收垃圾（这通常不会立即导致软引用对象被回收）</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待一段时间，让JVM有机会执行垃圾回收</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次检查软引用是否仍然指向一个可达对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;After GC: &quot;</span> + softRef.get());  </span><br><span class="line">        <span class="comment">// 输出可能还是: Hello, SoftReference!，除非内存真的紧张</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动设置原始引用为null，使对象仅由软引用持有</span></span><br><span class="line">        str = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次尝试垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待一段时间，让JVM有机会执行垃圾回收</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后检查软引用是否仍然指向一个可达对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Finally: &quot;</span> + softRef.get());  <span class="comment">// 输出可能是: null，表示对象已被回收</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建了一个SoftReference来指向一个字符串对象。</p>
<p>尝试调用System.gc()来请求垃圾回收。</p>
<p>请注意，System.gc()只是一个提示，JVM并不保证会立即执行垃圾回收。使用Thread.sleep()来等待一段时间，给JVM一个执行垃圾回收的机会。</p>
<p>最后，将原始的强引用设置为null，这意味着只有软引用在维持着对象的生命。再次请求垃圾回收后，如果此时JVM认为有必要释放更多内存，软引用指向的对象就可能被回收。</p>
<p>在实际应用中，软引用通常用于缓存场景，例如缓存图像、文件或计算结果，这样在内存压力增加时，这些缓存项可以被释放，避免程序因内存不足而崩溃。</p>
<h2 id="弱引用-Weak-Reference"><a href="#弱引用-Weak-Reference" class="headerlink" title="弱引用 (Weak Reference)"></a>弱引用 (Weak Reference)</h2><p>弱引用的强度比软引用更低。在下一次垃圾收集发生时，不管系统内存是否充足，弱引用都会被回收。<br>弱引用对象在下一次垃圾收集时一定会被回收，即使系统中还有足够的内存。<br>弱引用通常用于实现快速失败的缓存或辅助清理操作，如ThreadLocal的清理。</p>
<p>【2】弱引用 (Weak Reference)实例</p>
<p>弱引用（Weak Reference）在Java中用于创建那些在下一次垃圾回收时一定会被回收的对象引用。弱引用比软引用更弱，它不提供任何关于对象生存时间的保证，只要垃圾回收器运行，弱引用指向的对象就会被回收。</p>
<p>下面是一个使用WeakReference的示例，展示如何创建弱引用以及如何检测对象是否仍然可达：</p>
<p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeakReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个引用队列</span></span><br><span class="line">        ReferenceQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 创建一个字符串对象，并使用弱引用指向它</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello, WeakReference!&quot;</span>);</span><br><span class="line">        WeakReference&lt;String&gt; weakRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(str, queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查弱引用是否仍然指向一个可达对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Initially: &quot;</span> + weakRef.get());  <span class="comment">// 输出: Hello, WeakReference!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动设置原始引用为null，使对象仅由弱引用持有</span></span><br><span class="line">        str = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待一段时间，让JVM有机会执行垃圾回收</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查弱引用是否仍然指向一个可达对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;After GC: &quot;</span> + weakRef.get());  <span class="comment">// 输出可能是: null，表示对象已被回收</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查引用队列是否已经收到了弱引用的通知</span></span><br><span class="line">        Reference&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt; ref = (Reference&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt;)queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Reference was enqueued.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们首先创建了一个WeakReference对象weakRef，它指向一个字符串对象。然后，我们将原始的强引用str设置为null，这意味着现在只有弱引用在维持着对象的生命。</p>
<p>接下来，我们调用System.gc()来强制垃圾回收。由于弱引用的特点，即使系统内存充足，弱引用指向的对象也会在垃圾回收时被回收。我们使用Thread.sleep()来等待一段时间，确保垃圾回收有机会被执行。</p>
<p>最后，我们检查弱引用weakRef是否仍然指向一个可达对象。如果对象已经被垃圾回收器回收，get()方法将返回null。</p>
<p>此外，我们还使用了引用队列（ReferenceQueue），当弱引用的对象被垃圾回收器回收后，弱引用会被加入到队列中。我们可以通过poll()方法从队列中取出引用，确认对象已经被回收。</p>
<p>弱引用通常用于实现线程局部变量（ThreadLocal）的自动清理功能，或者用于创建不需要长时间存在的对象的缓存。当对象不再被任何强引用持有时，弱引用允许这些对象迅速被垃圾回收器回收，从而节省内存。</p>
<h2 id="幻象引用-Phantom-Reference-或-虚引用"><a href="#幻象引用-Phantom-Reference-或-虚引用" class="headerlink" title="幻象引用 (Phantom Reference 或 虚引用)"></a>幻象引用 (Phantom Reference 或 虚引用)</h2><p>幻象引用是最弱的一种引用关系，一个对象是否有幻象引用的存在完全不会对其生存时间构成影响，也无法通过幻象引用来获取一个实例。<br>幻象引用的用途是在对象被垃圾收集器回收之后收到一个系统通知，类似于“finalization”机制，但是更加灵活和可控。<br>它们需要与ReferenceQueue配合使用，以接收引用被垃圾收集器清理的通知</p>
<p>【3】幻象引用 (Phantom Reference 或 虚引用)实例<br>幻象引用（Phantom Reference），也被称为虚引用，是Java中引用类型中最弱的一种。幻象引用不能单独使用来访问对象，它的主要作用是在对象被垃圾回收器回收时收到一个系统通知。幻象引用总是与引用队列（ReferenceQueue）一起使用，当引用所指向的对象被回收时，这个引用会被加入到引用队列中。</p>
<p>下面是一个使用PhantomReference的示例，展示如何创建幻象引用以及如何检测对象是否已经被垃圾回收器回收：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.PhantomReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhantomReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个引用队列</span></span><br><span class="line">        ReferenceQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用幻象引用指向这个对象，注意构造函数的第二个参数是引用队列</span></span><br><span class="line">        PhantomReference&lt;Object&gt; phantomRef = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(obj, queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时，直接通过幻象引用无法获取到对象，因为幻象引用本身并不能保持对象的可达性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Before GC: &quot;</span> + phantomRef.get());  <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动设置原始引用为null，使对象仅由幻象引用持有</span></span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制垃圾回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待一段时间，让JVM有机会执行垃圾回收</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查引用队列，看是否已经收到了幻象引用的通知</span></span><br><span class="line">        Reference&lt;?&gt; ref = queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Phantom reference was enqueued after object was garbage collected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再次尝试通过幻象引用获取对象，应该仍然是null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;After GC: &quot;</span> + phantomRef.get());  <span class="comment">// 输出: null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先创建了一个引用队列queue。接着，我们创建了一个普通的Java对象obj，然后使用PhantomReference创建了一个指向该对象的幻象引用phantomRef，并将引用队列作为构造函数的参数传入。</p>
<p>当我们尝试通过幻象引用phantomRef.get()来获取对象时，会发现返回的是null。这是因为幻象引用本身并不能保持对象的可达性，它不会阻止垃圾回收器回收这个对象。</p>
<p>然后，我们将原始的强引用obj设置为null，这意味着现在没有任何强引用指向这个对象，它将变为垃圾。我们调用System.gc()来强制垃圾回收，并使用Thread.sleep()来等待一段时间，确保垃圾回收有机会被执行。</p>
<p>最后，我们检查引用队列queue，如果幻象引用phantomRef所指向的对象已经被垃圾回收器回收，那么phantomRef会被加入到引用队列中。我们可以通过poll()方法从队列中取出引用，确认对象已经被回收。</p>
<p>幻象引用的主要应用场景是在对象被垃圾回收器回收之后，进行一些必要的清理工作，例如关闭资源、更新数据库状态等。由于幻象引用本身无法保持对象的可达性，因此它不能用于对象的访问，只能用于监听对象的销毁事件。</p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
        <tag>Lambda表达式</tag>
        <tag>stream流</tag>
        <tag>JavaAPI</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
</search>
